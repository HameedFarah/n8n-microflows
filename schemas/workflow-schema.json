{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "N8N Microflow Complete Schema",
  "type": "object",
  "required": ["workflow_meta", "inputs", "outputs", "implementation", "example", "reuse_info", "supabase_config"],
  
  "properties": {
    "workflow_meta": {
      "type": "object",
      "required": ["id", "goal", "category", "complexity", "execution_time", "reuse_potential", "tenant_aware", "dependencies", "tags", "version", "author", "created_date"],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-z]+__[a-z]+__[a-z_]+$",
          "description": "Must follow [function]__[tool]__[output] format"
        },
        "goal": {
          "type": "string",
          "maxLength": 200,
          "minLength": 10
        },
        "category": {
          "type": "string",
          "enum": ["content", "validation", "communication", "data", "seo", "social", "utilities"]
        },
        "complexity": {
          "type": "string",
          "enum": ["simple", "medium", "complex"]
        },
        "execution_time": {
          "type": "string",
          "pattern": "^[0-9]+-?[0-9]* seconds?$"
        },
        "reuse_potential": {
          "type": "string",
          "enum": ["high", "medium", "low"]
        },
        "tenant_aware": {
          "type": "string",
          "enum": ["yes", "no"]
        },
        "dependencies": {
          "type": "array",
          "items": {"type": "string"}
        },
        "tags": {
          "type": "array",
          "items": {"type": "string"},
          "minItems": 1,
          "maxItems": 10
        },
        "version": {
          "type": "string",
          "pattern": "^\\d+\\.\\d+\\.\\d+$"
        },
        "author": {
          "type": "string",
          "minLength": 1
        },
        "created_date": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    
    "inputs": {
      "type": "object",
      "required": ["schema"],
      "properties": {
        "schema": {
          "type": "object",
          "required": ["type", "properties"],
          "properties": {
            "type": {"const": "object"},
            "properties": {"type": "object"},
            "required": {"type": "array"}
          }
        },
        "validation_rules": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["field", "rule", "message"],
            "properties": {
              "field": {"type": "string"},
              "rule": {"type": "string"},
              "message": {"type": "string"}
            }
          }
        }
      }
    },
    
    "outputs": {
      "type": "object",
      "required": ["success", "error"],
      "properties": {
        "success": {"type": "object"},
        "error": {
          "type": "object",
          "required": ["error_code", "message", "retry_suggested"],
          "properties": {
            "error_code": {"type": "string"},
            "message": {"type": "string"},
            "retry_suggested": {"type": "boolean"}
          }
        }
      }
    },
    
    "implementation": {
      "type": "object",
      "required": ["primary_approach", "n8n_nodes", "supabase_tables", "error_handling"],
      "properties": {
        "primary_approach": {
          "type": "string",
          "enum": ["code", "gpt", "api_call", "hybrid"]
        },
        "n8n_nodes": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "required": ["type", "purpose", "parameters", "error_handling"],
            "properties": {
              "type": {"type": "string"},
              "purpose": {"type": "string"},
              "parameters": {"type": "object"},
              "error_handling": {"type": "object"}
            }
          }
        },
        "supabase_tables": {
          "type": "array",
          "items": {"type": "string"}
        },
        "error_handling": {"type": "object"}
      }
    },

    "supabase_config": {
      "type": "object",
      "required": ["tables", "rls_policies"],
      "properties": {
        "tables": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["name", "purpose"],
            "properties": {
              "name": {"type": "string"},
              "purpose": {"type": "string"},
              "tenant_field": {"type": "string"}
            }
          }
        },
        "rls_policies": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["table", "policy_name", "operation"],
            "properties": {
              "table": {"type": "string"},
              "policy_name": {"type": "string"},
              "operation": {"type": "string"}
            }
          }
        }
      }
    },

    "example": {
      "type": "object",
      "required": ["input", "output", "explanation"],
      "properties": {
        "input": {"type": "object"},
        "output": {"type": "object"},
        "explanation": {"type": "string", "minLength": 50}
      }
    },

    "reuse_info": {
      "type": "object",
      "required": ["compatible_with", "input_from", "output_to"],
      "properties": {
        "compatible_with": {
          "type": "array",
          "items": {"type": "string"}
        },
        "input_from": {
          "type": "array",
          "items": {"type": "string"}
        },
        "output_to": {
          "type": "array",
          "items": {"type": "string"}
        }
      }
    }
  }
}