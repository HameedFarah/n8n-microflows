{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "N8N Microflow Complete Schema",
  "type": "object",
  "required": ["workflow_meta", "inputs", "outputs", "implementation", "example", "reuse_info", "supabase_config"],
  
  "properties": {
    "workflow_meta": {
      "type": "object",
      "required": ["id", "goal", "category", "complexity", "execution_time", "reuse_potential", "tenant_aware", "dependencies", "tags", "version", "author", "created_date"],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-z]+__[a-z]+__[a-z_]+$",
          "description": "Must follow [function]__[tool]__[output] format",
          "examples": ["generate__gpt__product_review", "validate__schema__user_input"]
        },
        "goal": {
          "type": "string",
          "maxLength": 200,
          "minLength": 10,
          "description": "Single sentence describing workflow purpose"
        },
        "category": {
          "type": "string",
          "enum": ["content", "validation", "communication", "data", "seo", "social", "utilities"]
        },
        "complexity": {
          "type": "string",
          "enum": ["simple", "medium", "complex"]
        },
        "execution_time": {
          "type": "string",
          "pattern": "^[0-9]+-?[0-9]* seconds?$",
          "examples": ["3-5 seconds", "10 seconds", "30-45 seconds"]
        },
        "reuse_potential": {
          "type": "string",
          "enum": ["high", "medium", "low"]
        },
        "tenant_aware": {
          "type": "string",
          "enum": ["yes", "no"]
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-z_]+$"
          },
          "description": "External services or APIs required"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-z_]+$"
          },
          "minItems": 1,
          "maxItems": 10
        },
        "version": {
          "type": "string",
          "pattern": "^\\d+\\.\\d+\\.\\d+$",
          "description": "Semantic version number"
        },
        "author": {
          "type": "string",
          "minLength": 1
        },
        "created_date": {
          "type": "string",
          "format": "date-time"
        },
        "updated_date": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    
    "inputs": {
      "type": "object",
      "required": ["schema", "validation_rules"],
      "properties": {
        "schema": {
          "type": "object",
          "description": "Valid JSON Schema for input validation",
          "required": ["type", "properties"],
          "properties": {
            "type": {"const": "object"},
            "properties": {"type": "object"},
            "required": {"type": "array", "items": {"type": "string"}}
          }
        },
        "validation_rules": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["field", "rule", "message"],
            "properties": {
              "field": {"type": "string"},
              "rule": {"type": "string"},
              "message": {"type": "string"}
            }
          }
        },
        "tenant_isolation": {
          "type": "object",
          "properties": {
            "required": {"type": "boolean"},
            "tenant_field": {"type": "string"},
            "validation_method": {"type": "string", "enum": ["header", "token", "parameter"]}
          }
        }
      }
    },
    
    "outputs": {
      "type": "object",
      "required": ["success", "error"],
      "properties": {
        "success": {
          "type": "object",
          "required": ["schema", "examples"],
          "properties": {
            "schema": {"type": "object"},
            "examples": {"type": "array", "minItems": 1}
          }
        },
        "error": {
          "type": "object",
          "required": ["error_code", "message", "retry_suggested", "debug_info"],
          "properties": {
            "error_code": {
              "type": "string",
              "pattern": "^[A-Z_]+$"
            },
            "message": {"type": "string"},
            "retry_suggested": {"type": "boolean"},
            "debug_info": {
              "type": "object",
              "properties": {
                "log_level": {"type": "string", "enum": ["error", "warn", "info", "debug"]},
                "context_fields": {"type": "array", "items": {"type": "string"}}
              }
            }
          }
        }
      }
    },
    
    "implementation": {
      "type": "object",
      "required": ["primary_approach", "n8n_nodes", "supabase_tables", "error_handling", "performance"],
      "properties": {
        "primary_approach": {
          "type": "string",
          "enum": ["code", "gpt", "api_call", "hybrid"]
        },
        "n8n_nodes": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "required": ["type", "purpose", "parameters", "error_handling", "timeout"],
            "properties": {
              "type": {"type": "string"},
              "purpose": {"type": "string"},
              "parameters": {"type": "object"},
              "credentials": {"type": "string"},
              "error_handling": {
                "type": "object",
                "required": ["strategy", "retry_count", "fallback"],
                "properties": {
                  "strategy": {"type": "string", "enum": ["retry", "fallback", "fail", "continue"]},
                  "retry_count": {"type": "integer", "minimum": 0, "maximum": 5},
                  "fallback": {"type": "string"}
                }
              },
              "timeout": {"type": "integer", "minimum": 1000}
            }
          }
        },
        "supabase_tables": {
          "type": "array",
          "items": {"type": "string", "pattern": "^[a-z_]+$"}
        },
        "performance": {
          "type": "object",
          "properties": {
            "max_memory_mb": {"type": "integer"},
            "max_execution_time_ms": {"type": "integer"},
            "concurrent_limit": {"type": "integer"}
          }
        }
      }
    },

    "supabase_config": {
      "type": "object",
      "required": ["tables", "rls_policies", "functions"],
      "properties": {
        "tables": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["name", "purpose", "tenant_field"],
            "properties": {
              "name": {"type": "string"},
              "purpose": {"type": "string"},
              "tenant_field": {"type": "string"},
              "indexes": {"type": "array", "items": {"type": "string"}}
            }
          }
        },
        "rls_policies": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["table", "policy_name", "operation"],
            "properties": {
              "table": {"type": "string"},
              "policy_name": {"type": "string"},
              "operation": {"type": "string", "enum": ["SELECT", "INSERT", "UPDATE", "DELETE"]},
              "condition": {"type": "string"}
            }
          }
        },
        "functions": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["name", "purpose"],
            "properties": {
              "name": {"type": "string"},
              "purpose": {"type": "string"},
              "returns": {"type": "string"}
            }
          }
        }
      }
    },

    "example": {
      "type": "object",
      "required": ["input", "output", "explanation", "test_scenarios"],
      "properties": {
        "input": {"type": "object"},
        "output": {"type": "object"},
        "explanation": {"type": "string", "minLength": 50},
        "test_scenarios": {
          "type": "array",
          "minItems": 3,
          "items": {
            "type": "object",
            "required": ["scenario", "input", "expected_output"],
            "properties": {
              "scenario": {"type": "string"},
              "input": {"type": "object"},
              "expected_output": {"type": "object"}
            }
          }
        }
      }
    },

    "reuse_info": {
      "type": "object",
      "required": ["compatible_with", "input_from", "output_to", "chaining_examples"],
      "properties": {
        "compatible_with": {
          "type": "array",
          "items": {"type": "string", "pattern": "^[a-z]+__[a-z]+__[a-z_]+$"}
        },
        "input_from": {
          "type": "array",
          "items": {"type": "string"}
        },
        "output_to": {
          "type": "array",
          "items": {"type": "string"}
        },
        "chaining_examples": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["chain", "use_case"],
            "properties": {
              "chain": {"type": "array", "items": {"type": "string"}},
              "use_case": {"type": "string"}
            }
          }
        }
      }
    },

    "vector_embedding": {
      "type": "object",
      "properties": {
        "embedding_text": {"type": "string"},
        "keywords": {"type": "array", "items": {"type": "string"}},
        "semantic_tags": {"type": "array", "items": {"type": "string"}},
        "similarity_threshold": {"type": "number", "minimum": 0, "maximum": 1}
      }
    }
  }
}